;;; Model for the maze
;;;

;; Determine if there is a path from our current position to the visual-location on our left.
(p determine-path-left
    =goal>
        state determine-path
    =visual>
        - left nil
        left =left
        screen-pos =previous-pos
        id =previous-id
        screen-x =current-x
        screen-y =current-y
    =visual-location>
        screen-y =current-y
        < screen-x =current-x
    =imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
==>
    =goal>
        state move-attention
        previous determine-path
    +imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
        chosen-id =left
        chosen-direction left
        previous-pos =previous-pos
        previous-id =previous-id
    =visual>
        left-attended true
    -visual>
    =visual-location>
)

;; Determine if there is a path from our current position to the visual-location on our right.
(p determine-path-right
    =goal>
        state determine-path
    =visual>
        - right nil
        right =right
        screen-pos =previous-pos
        id =previous-id
        screen-x =current-x
        screen-y =current-y
    =visual-location>
        screen-y =current-y
        > screen-x =current-x
    =imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
==>
    =goal>
        state move-attention
        previous determine-path
    +imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
        chosen-id =right
        chosen-direction right
        previous-pos =previous-pos
        previous-id =previous-id
    =visual>
        right-attended true
    -visual>
    =visual-location>
)

;; Determine if there is a path from our current position to the visual-location upwards.
(p determine-path-up
    =goal>
        state determine-path
    =visual>
        - up nil
        up =up
        screen-pos =previous-pos
        id =previous-id
        screen-x =current-x
        screen-y =current-y
    =visual-location>
        < screen-y =current-y
        screen-x =current-x
    =imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
==>
    =goal>
        state move-attention
        previous determine-path
    +imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
        chosen-id =up
        chosen-direction up
        previous-pos =previous-pos
        previous-id =previous-id
    =visual>
        up-attended true
    -visual>
    =visual-location>
)

;; Determine if there is a path from our current position to the visual-location downwards.
(p determine-path-down
    =goal>
        state determine-path
    =visual>
        - down nil
        down =down
        screen-pos =previous-pos
        id =previous-id
        screen-x =current-x
        screen-y =current-y
    =visual-location>
        > screen-y =current-y
        screen-x =current-x
    =imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
==>
    =goal>
        state move-attention
        previous determine-path
    +imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
        chosen-id =down
        chosen-direction down
        previous-pos =previous-pos
        previous-id =previous-id
    =visual>
        down-attended true
    -visual>
    =visual-location>
)

(p check-path
    =goal>
        state check-path
    =imaginal>
        chosen-id =id
        chosen-direction =dir
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
    =visual>
        id =id
==>
    =goal>
        state move
    +action>
        cmd move
        direction =dir
    +imaginal>
        chosen-id =id
        chosen-direction =dir
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
        target =target
        target-id =target-id
        tried-up false
        tried-down false
        tried-left false
        tried-right false
    =visual>
)

(p check-path-fail
    =goal>
        state check-path
    =imaginal>
        chosen-id =id
        previous-pos =previous
    =visual>
        - id =id
==>
    =goal>
        state find-next
    +visual>
        cmd move-attention
        screen-pos =previous
)


