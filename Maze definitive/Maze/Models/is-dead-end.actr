;;; Checks for dead ends

;; Check if the currently attended cell is a dead end. Start backtracking.
(p is-dead-end
    =goal>
        state is-dead-end
    =visual>
        isa intersection
        color gray
        left-attended true
        right-attended true
        up-attended true
        down-attended true
==>
    =goal>
        state backtrack
    =visual>
)

;; Check if the currently attended cell is the finish. DONE
(p is-finish
    =goal>
        state is-dead-end
    =visual>
        isa intersection
        color orange
==>
    +action>
        cmd done
)

;; The currently attended cell is not a dead end, because the left entrance is free. Find a new intersection to move to.
(p is-no-dead-end-left
    =goal>
        state is-dead-end
    =visual>
        - color orange
        left-attended false
==>
    =goal>
        state find-next
    =visual>
)

;; The currently attended cell is not a dead end, because the right entrance is free. Find a new intersection to move to.
(p is-no-dead-end-right
    =goal>
        state is-dead-end
    =visual>
        - color orange
        right-attended false
==>
    =goal>
        state find-next
    =visual>
)

;; The currently attended cell is not a dead end, because the up entrance is free. Find a new intersection to move to.
(p is-no-dead-end-up
    =goal>
        state is-dead-end
    =visual>
        - color orange
        up-attended false
==>
    =goal>
        state find-next
    =visual>
)

;; The currently attended cell is not a dead end, because the down entrance is free. Find a new intersection to move to.
(p is-no-dead-end-down
    =goal>
        state is-dead-end
    =visual>
        - color orange
        down-attended false
==>
    =goal>
        state find-next
    =visual>
)
