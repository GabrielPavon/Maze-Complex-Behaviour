;;; Checking for bottlenecks

;; Find a bottleneck.
(p find-bottleneck
    =goal>
        state find-bottleneck
==>
    +visual-location>
        kind bottleneck
        :attended nil
        :nearest current
    =visual>
    =goal>
        state check-find-bottleneck
)

;; There was a bottleneck found. Move attention there.
(p check-success-bottleneck
    =goal>
        state check-find-bottleneck
    =visual>
        screen-x =previous-x
        screen-y =previous-y
        screen-pos =previous-pos
    ?visual-location>
        buffer full
    =imaginal>
        target =target
        target-id =target-id
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
==>
    =goal>
        previous check-find-bottleneck
        state move-attention
    +imaginal>
        previous-x =previous-x
        previous-y =previous-y
        previous-pos =previous-pos
        target =target
        target-id =target-id
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
)

;; There was no bottleneck found. Check for dead end.
 (p check-fail-bottleneck
     =goal>
         state check-find-bottleneck
     ?visual-location>
         buffer failure
     =imaginal>
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
 ==>
     =goal>
         state is-dead-end
     =imaginal>
        target =finish
        target-id 0
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
 )

;; Check if a horizontal bottleneck is to the right of our current location.
(p check-horizontal-bottleneck-viability1
     =goal>
         state check-bottleneck-viability1
     =imaginal>
        previous-x =previous-x
     =visual>
        left-attended false
        right-attended false
        > screen-x =previous-x
    =visual-location>
 ==>
     =goal>
         state check-bottleneck-viability2
     =imaginal>
     =visual>
     =visual-location>
 )
 
 ;; Horizontal bottleneck is not to the right of our current location. Find a new intersection to move to.
 (p check-horizontal-bottleneck-viability1-fail
     =goal>
         state check-bottleneck-viability1
     =imaginal>
        previous-x =finish-x
        previous-pos =pos
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     =visual>
        left-attended false
        right-attended false
        <= screen-x =previous-x
 ==>
     =goal>
         state find-next
     =imaginal>
        target =finish
        target-id 0
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     +visual>
        cmd move-attention
        screen-pos =pos
 )
 
 ;; Check if a horizontal bottleneck is to left of the finish. Find a new intersection to move to.
 (p check-horizontal-bottleneck-viability2
     =goal>
         state check-bottleneck-viability2
     =imaginal>
        previous-pos =previous-pos
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     =visual>
        left-attended false
        right-attended false
        < screen-x =finish-x
        id =id
    =visual-location>
 ==>
     =goal>
         state find-next
     +imaginal>
        target =visual-location
        target-id =id
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     +visual>
        cmd move-attention
        screen-pos =previous-pos
 )
 
 ;; Horizontal bottleneck is not to the left of the finish. Find a new intersection to move to.
 (p check-horizontal-bottleneck-viability2-fail
     =goal>
         state check-bottleneck-viability2
     =imaginal>
        finish-x =finish-x
        previous-pos =pos
        finish =finish
        finish-y =finish-y
     =visual>
        left-attended false
        right-attended false
        >= screen-x =finish-x
 ==>
     =goal>
         state find-next
     =imaginal>
        target =finish
        target-id 0
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     +visual>
         cmd move-attention
         screen-pos =pos
 )
 
;; Check if a vertical bottleneck is downwards of our current location.
 (p check-vertical-bottleneck-viability1
     =goal>
         state check-bottleneck-viability1
     =imaginal>
        previous-y =previous-y
     =visual>
        up-attended false
        down-attended false
        > screen-y =previous-y
    =visual-location>
 ==>
     =goal>
         state check-bottleneck-viability2
     =imaginal>
     =visual>
     =visual-location>
 )
 
 ;; Vertical bottleneck is not downwards of our current location. Find a new intersection to move to.
 (p check-vertical-bottleneck-viability1-fail
     =goal>
         state check-bottleneck-viability1
     =imaginal>
        previous-y =previous-y
        previous-pos =pos
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     =visual>
        up-attended false
        down-attended false
        <= screen-y =previous-y
 ==>
     =goal>
         state find-next
     =imaginal>
        target =finish
        target-id 0
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     +visual>
        cmd move-attention
        screen-pos =pos
 )
 
 ;; Check if a vertical bottleneck is upwards of the finish. Find a new intersection to move to.
 (p check-vertical-bottleneck-viability2
     =goal>
         state check-bottleneck-viability2
     =imaginal>
        previous-pos =previous-pos
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     =visual>
        up-attended false
        down-attended false
        < screen-y =finish-y
        id =id
    =visual-location>
 ==>
     =goal>
         state find-next
     +imaginal>
         target =visual-location
         target-id =id
         finish =finish
         finish-x =finish-x
         finish-y =finish-y
     +visual>
         cmd move-attention
         screen-pos =previous-pos
 )
 
 ;; Vertical bottleneck is not upwards of the finish. Find a new intersection to move to.
 (p check-vertical-bottleneck-viability2-fail
     =goal>
         state check-bottleneck-viability2
     =imaginal>
        finish-y =finish-y
        previous-pos =pos
        finish =finish
        finish-x =finish-x
     =visual>
        up-attended false
        down-attended false
        >= screen-y =finish-y
 ==>
     =goal>
         state find-next
     =imaginal>
        target =finish
        target-id 0
        finish =finish
        finish-x =finish-x
        finish-y =finish-y
     +visual>
        cmd move-attention
        screen-pos =pos
 )
